#+TITLE: Monoidal Radios

Model SDR flowgraphs with monoidal categories.

Many software-defined-radio ([[https://www.rtl-sdr.com/][SDR]]) systems use a flowgraph
to specify how the signals are to be processed.
There are large numbers of devices and of SDR programs,
so managing the ways of hooking them up poses a combinatorial challenge.

This project is investigating how to use CT techniques to

   * understand the connection problem (many devices to many programs)
   * explore notations to express flowgraphs
   * use a flowgraph to reason about signal properties
   * transform flowgraphs to different target runtimes
   * attach configuration data, provenance to flowgraph blocks.

   * build open-source diagram management tools
     * interactive editors
     * databases
     * flowgraph read/write (monmor, gnuradio, ptolemy)
     * flowgraph verify
     * convert, say, a gnuradio flowgraph to a luaradio program

* Goals

   * Read and write serialized graphs in these formats:
     * monmor
     * gnuradio (xml)
     * ptolemy (xml)
     * homotopy.io
     * luaradio (lua)
     * pothos (?)

   * Transform signal flowgraphs between these topologies:
     * gnuradio (python)
     * luaradio (lua)
     * ptolemy (xml)
       
   * Verify properties of flowgraphs


* Current State
  
  There's a collection of documentation and sample flowgraph files.
  There is one codec for reading gnuradio GRC files.
  
  There is a companion project to build a diagram editor,
  but it is not yet online.
  
  Directories:
  
** codec
   
   There is one codec for reading gnuradio GRC files.
   
** docs
   
   Documentation about devices, summaries of SDR software,
   instructions for building the software.

** gr

   [[https://www.gnuradio.org/][gnuradio]] "GRC" flowgraph files.  These are for testing the
   flowgraph codecs, but some are interesting in their own right.

** luaradio

   Flowgraphs written as lua programs.
   luaradio can run these directly, so it's an interesting
   runtime target as well as a flowgraph file format.
   

* SDR, Simulation Systems
  
  All these systems use some form of flowgraph to represent
  the processing of signals.  We'd like to be able to
  read these formats, and transform them into one another.

** [[https://www.gnuradio.org/][gnuradio]] 
   
   GnuRadio still uses Python 2.7, so it can't 
   interop with Clojure.

** pothos
** ptolemy
   
   Ptolemy stores its flowgraphs in an XML format known as MoML.
   
   If you get an error like "Invalid DTD" when you parse a MoML file,
   you may have to change the DTD directive at the top of the MoML file
   to have the correct URL -- it must be =https:= not =http:=.

** [[https://luaradio.io/][luaradio]]

   If these could be generated, they could be re-read.
   A tool could generate the Lua for a flowgraph,
   and then use LuaJIT to run it.



* Codec

  We seek to convert graphs from GnuRadio and Ptolemy into
  a common format, from whence may be produced other representations
  such as monmor.
  
  The common format is an in-memory representation of the graph
  as a tree of maps.  We'll call them nodes.  Each node
  has at least =:name= key.
  It may have a =:content= key, whose value is a vector of
  nodes (maps).
  

| =:name=    | "UDPSource"                           | all     |
| =:class=   | =ptolemy.kernel.util.StringAttribute= | ptolemy |
| =:value=   | "text"                                | ptolemy |
| =:content= | [{...}]                               | ptolemy |

  A node may have a value.  What types does that have in ptolemy models?

  A node may have =:content= whether or not it has a =:value=.
  Content is an array of nodes.
  
  In ptolemy, some elements such as =StringAttribute=, can have
  properties, such as =_style=, as content.

* Questions

How to attach configuration data to the blocks?
This is equivalent to a map of parameters such as
sampling rate, center frequency, bandwidth, antenna selection,
and such.

How can we preserve provenance of the model parts?
This could include which flowgraph they originally came from,
which original runtime system it targeted.
That could help interpret the parameter values.

What is QSpectrum Analyzer?

* References
  
[[http://www.abclinuxu.cz/blog/jenda/2019/11/gnu-radio-first-steps-a-fm-receiver][FM Receiver in GnuRadio, step by step]]

The Ubuntu =gnuradio= installs this example:
[[file:/usr/share/gnuradio/examples/uhd/usrp_wfm_rcv_sca.py][usrp_wfm_rcv_sca.py]]

LuaRadio is intended for embedded devices.
A nice lightweight alternative to gnuradio.
It has a JIT compiler!  How fast is it?
It's portable to ARM.  Does it GC?

How about a ClojureScript to LuaJIT compiler?


* SDR models using ACT

  synthesizer patch bay is a monoidal category
  
  Is a synthesizer patch a realization of a bunch of operads?

** How to represent the signal plan in an SDR model?
   
   The signal-processing paths in the SDR flow graph 
   can be modeled as a graph where nodes are sample
   types and arrows are functions that transform one
   type to another.
   
   "type" here means an ADT, which could be an atomic
   type like int, or a structured type like array of int.
   Often the type will be "stream of int" or "stream of cfloat".
   
   The flowgraphs can be seen as proofs in a monoidal 
   category.

** How to represent control plane in an SDR model?
   
   The control plane allows a system to dynamically control its
   components at runtime. "Control" here means a way to change
   parameters, stop and start operations, and inspect the state
   of the component.

   There is a pub-sub event mechanism that allows components
   to react to events sent by controllers, or by anything else.
   One interesting kind of event is sent by certain components
   that process streams of signal samples, when they encounter
   a specially-marked sample placed there by an earlier stage
   in the flow graph.
